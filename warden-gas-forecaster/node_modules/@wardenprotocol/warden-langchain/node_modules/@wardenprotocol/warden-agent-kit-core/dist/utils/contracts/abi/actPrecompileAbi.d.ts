declare const _default: readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "author";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }, {
        readonly indexed: false;
        readonly internalType: "enum ActionStatus";
        readonly name: "previousStatus";
        readonly type: "uint8";
    }, {
        readonly indexed: false;
        readonly internalType: "enum ActionStatus";
        readonly name: "newStatus";
        readonly type: "uint8";
    }];
    readonly name: "ActionStateChange";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "participant";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }, {
        readonly indexed: false;
        readonly internalType: "enum VoteType";
        readonly name: "voteType";
        readonly type: "uint8";
    }];
    readonly name: "ActionVoted";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }];
    readonly name: "CreateAction";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "templateId";
        readonly type: "uint64";
    }];
    readonly name: "CreateTemplate";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "author";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "templateId";
        readonly type: "uint64";
    }];
    readonly name: "UpdateTemplate";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }];
    readonly name: "actionById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "id";
                readonly type: "uint64";
            }, {
                readonly internalType: "enum ActionStatus";
                readonly name: "status";
                readonly type: "uint8";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "typeUrl";
                    readonly type: "string";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "value";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct Types.AnyType";
                readonly name: "msg";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "typeUrl";
                    readonly type: "string";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "value";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct Types.AnyType";
                readonly name: "result";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "timeoutHeight";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "secs";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nanos";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Types.Timestamp";
                readonly name: "createdAt";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "secs";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nanos";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Types.Timestamp";
                readonly name: "updatedAt";
                readonly type: "tuple";
            }, {
                readonly internalType: "string";
                readonly name: "approveExpression";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "rejectExpression";
                readonly type: "string";
            }, {
                readonly internalType: "address[]";
                readonly name: "mentions";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "participant";
                    readonly type: "address";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "secs";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nanos";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.Timestamp";
                    readonly name: "votedAt";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "enum VoteType";
                    readonly name: "voteType";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct ActionVote[]";
                readonly name: "votes";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct Action";
            readonly name: "action";
            readonly type: "tuple";
        }];
        readonly internalType: "struct ActionByIdResponse";
        readonly name: "response";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes";
            readonly name: "key";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint64";
            readonly name: "offset";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "limit";
            readonly type: "uint64";
        }, {
            readonly internalType: "bool";
            readonly name: "countTotal";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "reverse";
            readonly type: "bool";
        }];
        readonly internalType: "struct Types.PageRequest";
        readonly name: "pagination";
        readonly type: "tuple";
    }];
    readonly name: "actions";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "nextKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint64";
                readonly name: "total";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Types.PageResponse";
            readonly name: "pagination";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "id";
                readonly type: "uint64";
            }, {
                readonly internalType: "enum ActionStatus";
                readonly name: "status";
                readonly type: "uint8";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "typeUrl";
                    readonly type: "string";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "value";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct Types.AnyType";
                readonly name: "msg";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "typeUrl";
                    readonly type: "string";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "value";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct Types.AnyType";
                readonly name: "result";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "timeoutHeight";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "secs";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nanos";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Types.Timestamp";
                readonly name: "createdAt";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "secs";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nanos";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Types.Timestamp";
                readonly name: "updatedAt";
                readonly type: "tuple";
            }, {
                readonly internalType: "string";
                readonly name: "approveExpression";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "rejectExpression";
                readonly type: "string";
            }, {
                readonly internalType: "address[]";
                readonly name: "mentions";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "participant";
                    readonly type: "address";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "secs";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nanos";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.Timestamp";
                    readonly name: "votedAt";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "enum VoteType";
                    readonly name: "voteType";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct ActionVote[]";
                readonly name: "votes";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct Action[]";
            readonly name: "actions";
            readonly type: "tuple[]";
        }];
        readonly internalType: "struct ActionsResponse";
        readonly name: "response";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes";
            readonly name: "key";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint64";
            readonly name: "offset";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "limit";
            readonly type: "uint64";
        }, {
            readonly internalType: "bool";
            readonly name: "countTotal";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "reverse";
            readonly type: "bool";
        }];
        readonly internalType: "struct Types.PageRequest";
        readonly name: "pagination";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "addr";
        readonly type: "address";
    }, {
        readonly internalType: "enum ActionStatus";
        readonly name: "status";
        readonly type: "uint8";
    }];
    readonly name: "actionsByAddress";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "nextKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint64";
                readonly name: "total";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Types.PageResponse";
            readonly name: "pagination";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "id";
                readonly type: "uint64";
            }, {
                readonly internalType: "enum ActionStatus";
                readonly name: "status";
                readonly type: "uint8";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "typeUrl";
                    readonly type: "string";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "value";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct Types.AnyType";
                readonly name: "msg";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "string";
                    readonly name: "typeUrl";
                    readonly type: "string";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "value";
                    readonly type: "bytes";
                }];
                readonly internalType: "struct Types.AnyType";
                readonly name: "result";
                readonly type: "tuple";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }, {
                readonly internalType: "uint64";
                readonly name: "timeoutHeight";
                readonly type: "uint64";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "secs";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nanos";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Types.Timestamp";
                readonly name: "createdAt";
                readonly type: "tuple";
            }, {
                readonly components: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "secs";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nanos";
                    readonly type: "uint64";
                }];
                readonly internalType: "struct Types.Timestamp";
                readonly name: "updatedAt";
                readonly type: "tuple";
            }, {
                readonly internalType: "string";
                readonly name: "approveExpression";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "rejectExpression";
                readonly type: "string";
            }, {
                readonly internalType: "address[]";
                readonly name: "mentions";
                readonly type: "address[]";
            }, {
                readonly components: readonly [{
                    readonly internalType: "address";
                    readonly name: "participant";
                    readonly type: "address";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "secs";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nanos";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.Timestamp";
                    readonly name: "votedAt";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "enum VoteType";
                    readonly name: "voteType";
                    readonly type: "uint8";
                }];
                readonly internalType: "struct ActionVote[]";
                readonly name: "votes";
                readonly type: "tuple[]";
            }];
            readonly internalType: "struct Action[]";
            readonly name: "actions";
            readonly type: "tuple[]";
        }];
        readonly internalType: "struct ActionsByAddressResponse";
        readonly name: "response";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }];
    readonly name: "checkAction";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "string";
        readonly name: "name";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "definition";
        readonly type: "string";
    }];
    readonly name: "newTemplate";
    readonly outputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "";
        readonly type: "uint64";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }];
    readonly name: "revokeAction";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "templateId";
        readonly type: "uint64";
    }];
    readonly name: "templateById";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "id";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "expression";
                readonly type: "string";
            }];
            readonly internalType: "struct Template";
            readonly name: "template";
            readonly type: "tuple";
        }];
        readonly internalType: "struct TemplateByIdResponse";
        readonly name: "response";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes";
            readonly name: "key";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint64";
            readonly name: "offset";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "limit";
            readonly type: "uint64";
        }, {
            readonly internalType: "bool";
            readonly name: "countTotal";
            readonly type: "bool";
        }, {
            readonly internalType: "bool";
            readonly name: "reverse";
            readonly type: "bool";
        }];
        readonly internalType: "struct Types.PageRequest";
        readonly name: "pagination";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "creator";
        readonly type: "address";
    }];
    readonly name: "templates";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "nextKey";
                readonly type: "bytes";
            }, {
                readonly internalType: "uint64";
                readonly name: "total";
                readonly type: "uint64";
            }];
            readonly internalType: "struct Types.PageResponse";
            readonly name: "pagination";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint64";
                readonly name: "id";
                readonly type: "uint64";
            }, {
                readonly internalType: "address";
                readonly name: "creator";
                readonly type: "address";
            }, {
                readonly internalType: "string";
                readonly name: "name";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "expression";
                readonly type: "string";
            }];
            readonly internalType: "struct Template[]";
            readonly name: "templates";
            readonly type: "tuple[]";
        }];
        readonly internalType: "struct TemplatesResponse";
        readonly name: "response";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "templateId";
        readonly type: "uint64";
    }, {
        readonly internalType: "string";
        readonly name: "name";
        readonly type: "string";
    }, {
        readonly internalType: "string";
        readonly name: "definition";
        readonly type: "string";
    }];
    readonly name: "updateTemplate";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint64";
        readonly name: "actionId";
        readonly type: "uint64";
    }, {
        readonly internalType: "enum VoteType";
        readonly name: "voteType";
        readonly type: "uint8";
    }];
    readonly name: "voteForAction";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}];
export default _default;

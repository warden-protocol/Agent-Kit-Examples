import { WardenAction } from "./warden_action";
import { z } from "zod";
import { DEFAULT_PAGINATION } from "../../utils/contracts/constants/common";
declare enum AddressType {
    Unspecified = 0,
    Ethereum = 1,
    Osmosis = 2
}
interface GetKeysBySpaceIdRequest {
    pagination?: typeof DEFAULT_PAGINATION;
    spaceId: bigint;
    deriveAddresses?: AddressType[];
}
export declare const getKeysBySpaceIdArgs: (request: GetKeysBySpaceIdRequest) => [{
    readonly key: "0x";
    readonly offset: 0n;
    readonly limit: 100n;
    readonly countTotal: true;
    readonly reverse: false;
}, bigint, AddressType[]];
/**
 * Input schema for get keys action.
 */
export declare const GetKeysInput: z.ZodObject<{
    spaceId: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    spaceId: number;
}, {
    spaceId: number;
}>;
/**
 * Gets keys for a given space.
 *
 * @param args - The input arguments for the action.
 * @returns A message containing the keys information.
 */
export declare function getKeys(args: z.infer<typeof GetKeysInput>): Promise<string>;
/**
 * Get keys action.
 */
export declare class GetKeysAction implements WardenAction<typeof GetKeysInput> {
    name: string;
    description: string;
    schema: z.ZodObject<{
        spaceId: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        spaceId: number;
    }, {
        spaceId: number;
    }>;
    function: typeof getKeys;
}
export {};

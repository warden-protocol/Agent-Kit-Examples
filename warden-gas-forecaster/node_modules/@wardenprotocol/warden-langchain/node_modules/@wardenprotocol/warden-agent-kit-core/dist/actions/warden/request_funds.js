"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RequestFundsAction = exports.RequestFundsInput = void 0;
exports.requestFunds = requestFunds;
const zod_1 = require("zod");
const chains_1 = require("../../utils/chains");
const bech32_converting_1 = __importDefault(require("bech32-converting"));
const REQUEST_FUNDS_PROMPT = `This tool should be called when a user wants to request tokens from the faucet.`;
exports.RequestFundsInput = zod_1.z.object({});
/**
 * Requests funds from the faucet for a specific key ID.
 *
 * @param args - The input arguments for the action.
 * @returns A message indicating the request status.
 */
async function requestFunds(account, args) {
    const faucetURL = `https://fapi.${chains_1.primaryChain.network}.wardenprotocol.org/request/${(0, bech32_converting_1.default)("warden").toBech32(account.address)}`;
    try {
        const response = await fetch(faucetURL, {
            method: "GET",
            headers: {
                token: process.env.FAUCET_TOKEN ?? "",
            },
        });
        if (!response.ok) {
            throw new Error(`Faucet request failed: ${response.statusText}`);
        }
        const data = await response.json();
        return `Faucet request completed: ${data.txHash}`;
    }
    catch (error) {
        const errorMessage = error instanceof Error ? error.message : "Unknown error";
        throw new Error(`Failed to request tokens from faucet: ${errorMessage}`);
    }
}
/**
 * Request funds action.
 */
class RequestFundsAction {
    constructor() {
        this.name = "request_funds";
        this.description = REQUEST_FUNDS_PROMPT;
        this.schema = exports.RequestFundsInput;
        this.function = requestFunds;
    }
}
exports.RequestFundsAction = RequestFundsAction;

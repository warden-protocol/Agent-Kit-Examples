"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetKeysAction = exports.GetKeysInput = exports.getKeysBySpaceIdArgs = void 0;
exports.getKeys = getKeys;
const viem_1 = require("viem");
const zod_1 = require("zod");
const wardenPrecompileAbi_1 = __importDefault(require("../../utils/contracts/abi/wardenPrecompileAbi"));
const known_1 = require("../../utils/contracts/constants/known");
const chains_1 = require("../../utils/chains");
const common_1 = require("../../utils/contracts/constants/common");
const wardenContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.WARDEN;
const EMPTY_ARR = [];
var AddressType;
(function (AddressType) {
    AddressType[AddressType["Unspecified"] = 0] = "Unspecified";
    AddressType[AddressType["Ethereum"] = 1] = "Ethereum";
    AddressType[AddressType["Osmosis"] = 2] = "Osmosis";
})(AddressType || (AddressType = {}));
const GET_KEYS_PROMPT = `This tool should be called when a user wants to get all their keys for a given space.`;
const writable = (obj) => obj;
const getKeysBySpaceIdArgs = (request) => {
    const pagination = request?.pagination ?? common_1.DEFAULT_PAGINATION;
    const deriveAddresses = request?.deriveAddresses ?? EMPTY_ARR;
    return writable([pagination, request.spaceId, deriveAddresses]);
};
exports.getKeysBySpaceIdArgs = getKeysBySpaceIdArgs;
const publicClient = (0, viem_1.createPublicClient)({
    chain: chains_1.primaryChain,
    transport: (0, viem_1.http)(),
});
/**
 * Input schema for get keys action.
 */
exports.GetKeysInput = zod_1.z.object({
    spaceId: zod_1.z.number(),
});
/**
 * Gets keys for a given space.
 *
 * @param args - The input arguments for the action.
 * @returns A message containing the keys information.
 */
async function getKeys(args) {
    try {
        if (!wardenContract?.address) {
            throw new Error("Warden contract address not found");
        }
        const data = await publicClient.readContract({
            address: wardenContract.address,
            args: (0, exports.getKeysBySpaceIdArgs)({
                spaceId: BigInt(args.spaceId ?? 0),
                pagination: common_1.DEFAULT_PAGINATION,
                deriveAddresses: [AddressType.Ethereum, AddressType.Osmosis],
            }),
            abi: wardenPrecompileAbi_1.default,
            functionName: "keysBySpaceId",
        });
        return `These are all the keys:\n\n${data[0].map((key) => `KeyId - ${key.key.id} Key Addresses- ${key.addresses
            .map((address) => address.addressValue)
            .join(", ")}\n`)}`;
    }
    catch (error) {
        return `Error getting keys: ${error}`;
    }
}
/**
 * Get keys action.
 */
class GetKeysAction {
    constructor() {
        this.name = "get_keys";
        this.description = GET_KEYS_PROMPT;
        this.schema = exports.GetKeysInput;
        this.function = getKeys;
    }
}
exports.GetKeysAction = GetKeysAction;

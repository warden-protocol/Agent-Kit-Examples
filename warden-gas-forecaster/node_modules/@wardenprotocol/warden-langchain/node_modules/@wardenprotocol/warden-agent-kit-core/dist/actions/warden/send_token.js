"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SendTokenAction = exports.SendTokenInput = void 0;
exports.sendToken = sendToken;
const zod_1 = require("zod");
const chains_1 = require("../../utils/chains");
const known_1 = require("../../utils/contracts/constants/known");
const wardenContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.WARDEN;
if (!wardenContract?.address) {
    throw new Error("Warden contract address not found");
}
const SEND_TOKEN_PROMPT = `This tool should be called when a user wants to send tokens to another address. The user must specify the recipient address and the amount of tokens to send.`;
/**
 * Input schema for send token action.
 */
exports.SendTokenInput = zod_1.z.object({
    recipient: zod_1.z.string(),
    amount: zod_1.z.number().positive(),
    keyId: zod_1.z.number().positive(),
});
/**
 * Sends tokens to a specified address.
 *
 * @param account - The account to send tokens from.
 * @param args - The input arguments for the action.
 * @returns A message containing the transaction status.
 */
async function sendToken(account, args) {
    try {
        return `Successfully sent ${args.amount} Sepolia ETH to ${args.recipient}.`;
        // const publicClient = createPublicClient({
        //     chain: primaryChain,
        //     transport: http(),
        // });
        // const walletClient = createWalletClient({
        //     account,
        //     chain: primaryChain,
        //     transport: http(),
        // });
        // // Native token transfer
        // const hash = await walletClient.sendTransaction({
        //     to: args.recipient as `0x${string}`,
        //     value: BigInt(args.amount),
        // });
        // const receipt = await publicClient.waitForTransactionReceipt({
        //     hash,
        // });
        // if (receipt.status === "success") {
        //     return `Successfully sent ${args.amount} tokens to ${args.recipient}. Transaction hash: ${receipt.transactionHash}`;
        // } else {
        //     throw new Error("Transaction failed");
        // }
    }
    catch (error) {
        return `Error sending tokens: ${error}`;
    }
}
/**
 * Send token action.
 */
class SendTokenAction {
    constructor() {
        this.name = "send_token";
        this.description = SEND_TOKEN_PROMPT;
        this.schema = exports.SendTokenInput;
        this.function = sendToken;
    }
}
exports.SendTokenAction = SendTokenAction;

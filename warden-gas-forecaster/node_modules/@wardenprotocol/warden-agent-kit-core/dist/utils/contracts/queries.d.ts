import type { Config } from "wagmi";
export declare const getSignRequestByIdQueryOptions: (config: Config, id: bigint) => {
    readonly queryFn: ({ queryKey }: {
        queryKey: readonly ["readContract", Omit<import("@wagmi/core/internal").ExactPartial<{
            account?: import("viem").Account | import("abitype").Address | undefined;
            blockNumber?: bigint | undefined;
            factory?: import("abitype").Address | undefined;
            factoryData?: import("viem").Hex | undefined;
            stateOverride?: import("viem").StateOverride | undefined;
            blockTag?: import("viem").BlockTag | undefined;
        } & {
            abi: readonly [{
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "newAdmin";
                    readonly type: "address";
                }, {
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "adminsCount";
                    readonly type: "uint64";
                }];
                readonly name: "AddKeychainAdmin";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "newWriter";
                    readonly type: "address";
                }, {
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "writersCount";
                    readonly type: "uint64";
                }];
                readonly name: "AddKeychainWriter";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "newOwner";
                    readonly type: "address";
                }];
                readonly name: "AddSpaceOwner";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "FulfilSignRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "enum KeyType";
                    readonly name: "keyType";
                    readonly type: "uint8";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "NewKey";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "enum KeyType";
                    readonly name: "keyType";
                    readonly type: "uint8";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }];
                readonly name: "NewKeyRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }];
                readonly name: "NewKeychain";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "keyId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }, {
                    readonly indexed: false;
                    readonly internalType: "enum BroadcastType";
                    readonly name: "broadcastType";
                    readonly type: "uint8";
                }];
                readonly name: "NewSignRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "ownersCount";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "NewSpace";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "RejectKeyRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "RejectSignRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "admin";
                    readonly type: "address";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "adminsCount";
                    readonly type: "uint64";
                }];
                readonly name: "RemoveKeychainAdmin";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "removedOwner";
                    readonly type: "address";
                }];
                readonly name: "RemoveSpaceOwner";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "UpdateKey";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "keyReq";
                        readonly type: "tuple[]";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "sigReq";
                        readonly type: "tuple[]";
                    }];
                    readonly indexed: false;
                    readonly internalType: "struct KeychainFees";
                    readonly name: "keychainFees";
                    readonly type: "tuple";
                }];
                readonly name: "UpdateKeychain";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "UpdateSpace";
                readonly type: "event";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "newAdmin";
                    readonly type: "address";
                }];
                readonly name: "addKeychainAdmin";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "newWriter";
                    readonly type: "address";
                }];
                readonly name: "addKeychainWriter";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "newOwner";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "addSpaceOwner";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "int32[]";
                    readonly name: "deriveAddresses";
                    readonly type: "int32[]";
                }];
                readonly name: "allKeys";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "uint64";
                            readonly name: "id";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "spaceId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "keychainId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "enum KeyType";
                            readonly name: "keyType";
                            readonly type: "uint8";
                        }, {
                            readonly internalType: "bytes";
                            readonly name: "publicKey";
                            readonly type: "bytes";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "approveTemplateId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "rejectTemplateId";
                            readonly type: "uint64";
                        }];
                        readonly internalType: "struct Key";
                        readonly name: "key";
                        readonly type: "tuple";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "addressValue";
                            readonly type: "string";
                        }, {
                            readonly internalType: "enum AddressType";
                            readonly name: "addressType";
                            readonly type: "uint8";
                        }];
                        readonly internalType: "struct AddressesResponse[]";
                        readonly name: "addresses";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyResponse[]";
                    readonly name: "keys";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "pubKey";
                    readonly type: "bytes";
                }];
                readonly name: "fulfilKeyRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "signedData";
                    readonly type: "bytes";
                }];
                readonly name: "fulfilSignRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "int32[]";
                    readonly name: "deriveAddresses";
                    readonly type: "int32[]";
                }];
                readonly name: "keyById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "uint64";
                            readonly name: "id";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "spaceId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "keychainId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "enum KeyType";
                            readonly name: "keyType";
                            readonly type: "uint8";
                        }, {
                            readonly internalType: "bytes";
                            readonly name: "publicKey";
                            readonly type: "bytes";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "approveTemplateId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "rejectTemplateId";
                            readonly type: "uint64";
                        }];
                        readonly internalType: "struct Key";
                        readonly name: "key";
                        readonly type: "tuple";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "addressValue";
                            readonly type: "string";
                        }, {
                            readonly internalType: "enum AddressType";
                            readonly name: "addressType";
                            readonly type: "uint8";
                        }];
                        readonly internalType: "struct AddressesResponse[]";
                        readonly name: "addresses";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyResponse";
                    readonly name: "key";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "keyRequestById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "spaceId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keychainId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "enum KeyType";
                        readonly name: "keyType";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "enum KeyRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "string";
                        readonly name: "rejectReason";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyRequest";
                    readonly name: "keyRequest";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "enum KeyRequestStatus";
                    readonly name: "status";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }];
                readonly name: "keyRequests";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "spaceId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keychainId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "enum KeyType";
                        readonly name: "keyType";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "enum KeyRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "string";
                        readonly name: "rejectReason";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyRequest[]";
                    readonly name: "keyRequests";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "keychainById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "string";
                        readonly name: "name";
                        readonly type: "string";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "admins";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "writers";
                        readonly type: "address[]";
                    }, {
                        readonly components: readonly [{
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "keyReq";
                            readonly type: "tuple[]";
                        }, {
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "sigReq";
                            readonly type: "tuple[]";
                        }];
                        readonly internalType: "struct KeychainFees";
                        readonly name: "fees";
                        readonly type: "tuple";
                    }, {
                        readonly internalType: "string";
                        readonly name: "description";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "url";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "keybaseId";
                        readonly type: "string";
                    }];
                    readonly internalType: "struct Keychain";
                    readonly name: "keychain";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }];
                readonly name: "keychains";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "string";
                        readonly name: "name";
                        readonly type: "string";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "admins";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "writers";
                        readonly type: "address[]";
                    }, {
                        readonly components: readonly [{
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "keyReq";
                            readonly type: "tuple[]";
                        }, {
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "sigReq";
                            readonly type: "tuple[]";
                        }];
                        readonly internalType: "struct KeychainFees";
                        readonly name: "fees";
                        readonly type: "tuple";
                    }, {
                        readonly internalType: "string";
                        readonly name: "description";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "url";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "keybaseId";
                        readonly type: "string";
                    }];
                    readonly internalType: "struct Keychain[]";
                    readonly name: "keychains";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "int32[]";
                    readonly name: "deriveAddresses";
                    readonly type: "int32[]";
                }];
                readonly name: "keysBySpaceId";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "uint64";
                            readonly name: "id";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "spaceId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "keychainId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "enum KeyType";
                            readonly name: "keyType";
                            readonly type: "uint8";
                        }, {
                            readonly internalType: "bytes";
                            readonly name: "publicKey";
                            readonly type: "bytes";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "approveTemplateId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "rejectTemplateId";
                            readonly type: "uint64";
                        }];
                        readonly internalType: "struct Key";
                        readonly name: "key";
                        readonly type: "tuple";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "addressValue";
                            readonly type: "string";
                        }, {
                            readonly internalType: "enum AddressType";
                            readonly name: "addressType";
                            readonly type: "uint8";
                        }];
                        readonly internalType: "struct AddressesResponse[]";
                        readonly name: "addresses";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyResponse[]";
                    readonly name: "keys";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "enum KeyType";
                    readonly name: "keyType";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "string";
                        readonly name: "denom";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amount";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct Types.Coin[]";
                    readonly name: "maxKeychainFees";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "newKeyRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "name";
                    readonly type: "string";
                }, {
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "keyReq";
                        readonly type: "tuple[]";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "sigReq";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeychainFees";
                    readonly name: "keychainFees";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "string";
                    readonly name: "description";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "url";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "keybaseId";
                    readonly type: "string";
                }];
                readonly name: "newKeychain";
                readonly outputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keyId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "input";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "bytes[]";
                    readonly name: "analyzers";
                    readonly type: "bytes[]";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "encryptionKey";
                    readonly type: "bytes";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "string";
                        readonly name: "denom";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amount";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct Types.Coin[]";
                    readonly name: "maxKeychainFees";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "enum BroadcastType";
                    readonly name: "broadcastType";
                    readonly type: "uint8";
                }];
                readonly name: "newSignRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "additionalOwners";
                    readonly type: "address[]";
                }];
                readonly name: "newSpace";
                readonly outputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "rejectReason";
                    readonly type: "string";
                }];
                readonly name: "rejectKeyRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "rejectReason";
                    readonly type: "string";
                }];
                readonly name: "rejectSignRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "admin";
                    readonly type: "address";
                }];
                readonly name: "removeKeychainAdmin";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "removeSpaceOwner";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "signRequestById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keyId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "dataForSigning";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "enum SignRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "result";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "encryptionKey";
                        readonly type: "bytes";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }, {
                        readonly internalType: "enum BroadcastType";
                        readonly name: "broadcastType";
                        readonly type: "uint8";
                    }];
                    readonly internalType: "struct SignRequest";
                    readonly name: "signRequest";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "enum SignRequestStatus";
                    readonly name: "status";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "enum OptionalBroadcastType";
                    readonly name: "optionalBroadcastType";
                    readonly type: "uint8";
                }];
                readonly name: "signRequests";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keyId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "dataForSigning";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "enum SignRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "result";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "encryptionKey";
                        readonly type: "bytes";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }, {
                        readonly internalType: "enum BroadcastType";
                        readonly name: "broadcastType";
                        readonly type: "uint8";
                    }];
                    readonly internalType: "struct SignRequest[]";
                    readonly name: "signRequests";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "spaceById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "owners";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nonce";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveSignTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectSignTemplateId";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Space";
                    readonly name: "space";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }];
                readonly name: "spaces";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "owners";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nonce";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveSignTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectSignTemplateId";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Space[]";
                    readonly name: "spaces";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                }];
                readonly name: "spacesByOwner";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "owners";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nonce";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveSignTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectSignTemplateId";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Space[]";
                    readonly name: "spaces";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keyId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "updateKey";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "name";
                    readonly type: "string";
                }, {
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "keyReq";
                        readonly type: "tuple[]";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "sigReq";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeychainFees";
                    readonly name: "keychainFees";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "string";
                    readonly name: "description";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "url";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "keybaseId";
                    readonly type: "string";
                }];
                readonly name: "updateKeychain";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "updateSpace";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }];
            functionName: "allKeys" | "keyById" | "keyRequestById" | "keyRequests" | "keychainById" | "keychains" | "keysBySpaceId" | "signRequestById" | "signRequests" | "spaceById" | "spaces" | "spacesByOwner";
            args?: readonly [bigint] | undefined;
        } & {
            args: readonly [bigint];
        } & {
            address: import("abitype").Address;
        } & import("@wagmi/core/internal").ChainIdParameter<Config, number>> & import("@wagmi/core/internal").ScopeKeyParameter, "abi"> | Omit<import("@wagmi/core/internal").ExactPartial<{
            account?: import("viem").Account | import("abitype").Address | undefined;
            blockNumber?: bigint | undefined;
            factory?: import("abitype").Address | undefined;
            factoryData?: import("viem").Hex | undefined;
            stateOverride?: import("viem").StateOverride | undefined;
            blockTag?: import("viem").BlockTag | undefined;
        } & {
            abi: readonly [{
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "newAdmin";
                    readonly type: "address";
                }, {
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "adminsCount";
                    readonly type: "uint64";
                }];
                readonly name: "AddKeychainAdmin";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "newWriter";
                    readonly type: "address";
                }, {
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "writersCount";
                    readonly type: "uint64";
                }];
                readonly name: "AddKeychainWriter";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "newOwner";
                    readonly type: "address";
                }];
                readonly name: "AddSpaceOwner";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "FulfilSignRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "enum KeyType";
                    readonly name: "keyType";
                    readonly type: "uint8";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "NewKey";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "enum KeyType";
                    readonly name: "keyType";
                    readonly type: "uint8";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }];
                readonly name: "NewKeyRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }];
                readonly name: "NewKeychain";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "keyId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }, {
                    readonly indexed: false;
                    readonly internalType: "enum BroadcastType";
                    readonly name: "broadcastType";
                    readonly type: "uint8";
                }];
                readonly name: "NewSignRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "creator";
                    readonly type: "address";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "ownersCount";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "NewSpace";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "RejectKeyRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "RejectSignRequest";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "admin";
                    readonly type: "address";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "adminsCount";
                    readonly type: "uint64";
                }];
                readonly name: "RemoveKeychainAdmin";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "address";
                    readonly name: "removedOwner";
                    readonly type: "address";
                }];
                readonly name: "RemoveSpaceOwner";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "UpdateKey";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "keyReq";
                        readonly type: "tuple[]";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "sigReq";
                        readonly type: "tuple[]";
                    }];
                    readonly indexed: false;
                    readonly internalType: "struct KeychainFees";
                    readonly name: "keychainFees";
                    readonly type: "tuple";
                }];
                readonly name: "UpdateKeychain";
                readonly type: "event";
            }, {
                readonly anonymous: false;
                readonly inputs: readonly [{
                    readonly indexed: true;
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly indexed: false;
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }];
                readonly name: "UpdateSpace";
                readonly type: "event";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "newAdmin";
                    readonly type: "address";
                }];
                readonly name: "addKeychainAdmin";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "newWriter";
                    readonly type: "address";
                }];
                readonly name: "addKeychainWriter";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "newOwner";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "addSpaceOwner";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "int32[]";
                    readonly name: "deriveAddresses";
                    readonly type: "int32[]";
                }];
                readonly name: "allKeys";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "uint64";
                            readonly name: "id";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "spaceId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "keychainId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "enum KeyType";
                            readonly name: "keyType";
                            readonly type: "uint8";
                        }, {
                            readonly internalType: "bytes";
                            readonly name: "publicKey";
                            readonly type: "bytes";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "approveTemplateId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "rejectTemplateId";
                            readonly type: "uint64";
                        }];
                        readonly internalType: "struct Key";
                        readonly name: "key";
                        readonly type: "tuple";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "addressValue";
                            readonly type: "string";
                        }, {
                            readonly internalType: "enum AddressType";
                            readonly name: "addressType";
                            readonly type: "uint8";
                        }];
                        readonly internalType: "struct AddressesResponse[]";
                        readonly name: "addresses";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyResponse[]";
                    readonly name: "keys";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "pubKey";
                    readonly type: "bytes";
                }];
                readonly name: "fulfilKeyRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "signedData";
                    readonly type: "bytes";
                }];
                readonly name: "fulfilSignRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "int32[]";
                    readonly name: "deriveAddresses";
                    readonly type: "int32[]";
                }];
                readonly name: "keyById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "uint64";
                            readonly name: "id";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "spaceId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "keychainId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "enum KeyType";
                            readonly name: "keyType";
                            readonly type: "uint8";
                        }, {
                            readonly internalType: "bytes";
                            readonly name: "publicKey";
                            readonly type: "bytes";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "approveTemplateId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "rejectTemplateId";
                            readonly type: "uint64";
                        }];
                        readonly internalType: "struct Key";
                        readonly name: "key";
                        readonly type: "tuple";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "addressValue";
                            readonly type: "string";
                        }, {
                            readonly internalType: "enum AddressType";
                            readonly name: "addressType";
                            readonly type: "uint8";
                        }];
                        readonly internalType: "struct AddressesResponse[]";
                        readonly name: "addresses";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyResponse";
                    readonly name: "key";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "keyRequestById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "spaceId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keychainId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "enum KeyType";
                        readonly name: "keyType";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "enum KeyRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "string";
                        readonly name: "rejectReason";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyRequest";
                    readonly name: "keyRequest";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "enum KeyRequestStatus";
                    readonly name: "status";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }];
                readonly name: "keyRequests";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "spaceId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keychainId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "enum KeyType";
                        readonly name: "keyType";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "enum KeyRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "string";
                        readonly name: "rejectReason";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyRequest[]";
                    readonly name: "keyRequests";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "keychainById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "string";
                        readonly name: "name";
                        readonly type: "string";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "admins";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "writers";
                        readonly type: "address[]";
                    }, {
                        readonly components: readonly [{
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "keyReq";
                            readonly type: "tuple[]";
                        }, {
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "sigReq";
                            readonly type: "tuple[]";
                        }];
                        readonly internalType: "struct KeychainFees";
                        readonly name: "fees";
                        readonly type: "tuple";
                    }, {
                        readonly internalType: "string";
                        readonly name: "description";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "url";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "keybaseId";
                        readonly type: "string";
                    }];
                    readonly internalType: "struct Keychain";
                    readonly name: "keychain";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }];
                readonly name: "keychains";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "string";
                        readonly name: "name";
                        readonly type: "string";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "admins";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "writers";
                        readonly type: "address[]";
                    }, {
                        readonly components: readonly [{
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "keyReq";
                            readonly type: "tuple[]";
                        }, {
                            readonly components: readonly [{
                                readonly internalType: "string";
                                readonly name: "denom";
                                readonly type: "string";
                            }, {
                                readonly internalType: "uint256";
                                readonly name: "amount";
                                readonly type: "uint256";
                            }];
                            readonly internalType: "struct Types.Coin[]";
                            readonly name: "sigReq";
                            readonly type: "tuple[]";
                        }];
                        readonly internalType: "struct KeychainFees";
                        readonly name: "fees";
                        readonly type: "tuple";
                    }, {
                        readonly internalType: "string";
                        readonly name: "description";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "url";
                        readonly type: "string";
                    }, {
                        readonly internalType: "string";
                        readonly name: "keybaseId";
                        readonly type: "string";
                    }];
                    readonly internalType: "struct Keychain[]";
                    readonly name: "keychains";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "int32[]";
                    readonly name: "deriveAddresses";
                    readonly type: "int32[]";
                }];
                readonly name: "keysBySpaceId";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "uint64";
                            readonly name: "id";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "spaceId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "keychainId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "enum KeyType";
                            readonly name: "keyType";
                            readonly type: "uint8";
                        }, {
                            readonly internalType: "bytes";
                            readonly name: "publicKey";
                            readonly type: "bytes";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "approveTemplateId";
                            readonly type: "uint64";
                        }, {
                            readonly internalType: "uint64";
                            readonly name: "rejectTemplateId";
                            readonly type: "uint64";
                        }];
                        readonly internalType: "struct Key";
                        readonly name: "key";
                        readonly type: "tuple";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "addressValue";
                            readonly type: "string";
                        }, {
                            readonly internalType: "enum AddressType";
                            readonly name: "addressType";
                            readonly type: "uint8";
                        }];
                        readonly internalType: "struct AddressesResponse[]";
                        readonly name: "addresses";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeyResponse[]";
                    readonly name: "keys";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "enum KeyType";
                    readonly name: "keyType";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "string";
                        readonly name: "denom";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amount";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct Types.Coin[]";
                    readonly name: "maxKeychainFees";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "newKeyRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "string";
                    readonly name: "name";
                    readonly type: "string";
                }, {
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "keyReq";
                        readonly type: "tuple[]";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "sigReq";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeychainFees";
                    readonly name: "keychainFees";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "string";
                    readonly name: "description";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "url";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "keybaseId";
                    readonly type: "string";
                }];
                readonly name: "newKeychain";
                readonly outputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keyId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "input";
                    readonly type: "bytes";
                }, {
                    readonly internalType: "bytes[]";
                    readonly name: "analyzers";
                    readonly type: "bytes[]";
                }, {
                    readonly internalType: "bytes";
                    readonly name: "encryptionKey";
                    readonly type: "bytes";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "string";
                        readonly name: "denom";
                        readonly type: "string";
                    }, {
                        readonly internalType: "uint256";
                        readonly name: "amount";
                        readonly type: "uint256";
                    }];
                    readonly internalType: "struct Types.Coin[]";
                    readonly name: "maxKeychainFees";
                    readonly type: "tuple[]";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "enum BroadcastType";
                    readonly name: "broadcastType";
                    readonly type: "uint8";
                }];
                readonly name: "newSignRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address[]";
                    readonly name: "additionalOwners";
                    readonly type: "address[]";
                }];
                readonly name: "newSpace";
                readonly outputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "rejectReason";
                    readonly type: "string";
                }];
                readonly name: "rejectKeyRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "requestId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "rejectReason";
                    readonly type: "string";
                }];
                readonly name: "rejectSignRequest";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "admin";
                    readonly type: "address";
                }];
                readonly name: "removeKeychainAdmin";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "removeSpaceOwner";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "signRequestById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keyId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "dataForSigning";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "enum SignRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "result";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "encryptionKey";
                        readonly type: "bytes";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }, {
                        readonly internalType: "enum BroadcastType";
                        readonly name: "broadcastType";
                        readonly type: "uint8";
                    }];
                    readonly internalType: "struct SignRequest";
                    readonly name: "signRequest";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "enum SignRequestStatus";
                    readonly name: "status";
                    readonly type: "uint8";
                }, {
                    readonly internalType: "enum OptionalBroadcastType";
                    readonly name: "optionalBroadcastType";
                    readonly type: "uint8";
                }];
                readonly name: "signRequests";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "keyId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "dataForSigning";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "enum SignRequestStatus";
                        readonly name: "status";
                        readonly type: "uint8";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "result";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "bytes";
                        readonly name: "encryptionKey";
                        readonly type: "bytes";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "deductedKeychainFees";
                        readonly type: "tuple[]";
                    }, {
                        readonly internalType: "enum BroadcastType";
                        readonly name: "broadcastType";
                        readonly type: "uint8";
                    }];
                    readonly internalType: "struct SignRequest[]";
                    readonly name: "signRequests";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "id";
                    readonly type: "uint64";
                }];
                readonly name: "spaceById";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "owners";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nonce";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveSignTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectSignTemplateId";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Space";
                    readonly name: "space";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }];
                readonly name: "spaces";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "owners";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nonce";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveSignTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectSignTemplateId";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Space[]";
                    readonly name: "spaces";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "key";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "offset";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "limit";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "countTotal";
                        readonly type: "bool";
                    }, {
                        readonly internalType: "bool";
                        readonly name: "reverse";
                        readonly type: "bool";
                    }];
                    readonly internalType: "struct Types.PageRequest";
                    readonly name: "pageRequest";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "address";
                    readonly name: "owner";
                    readonly type: "address";
                }];
                readonly name: "spacesByOwner";
                readonly outputs: readonly [{
                    readonly components: readonly [{
                        readonly internalType: "uint64";
                        readonly name: "id";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "address";
                        readonly name: "creator";
                        readonly type: "address";
                    }, {
                        readonly internalType: "address[]";
                        readonly name: "owners";
                        readonly type: "address[]";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "nonce";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectAdminTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "approveSignTemplateId";
                        readonly type: "uint64";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "rejectSignTemplateId";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Space[]";
                    readonly name: "spaces";
                    readonly type: "tuple[]";
                }, {
                    readonly components: readonly [{
                        readonly internalType: "bytes";
                        readonly name: "nextKey";
                        readonly type: "bytes";
                    }, {
                        readonly internalType: "uint64";
                        readonly name: "total";
                        readonly type: "uint64";
                    }];
                    readonly internalType: "struct Types.PageResponse";
                    readonly name: "pageResponse";
                    readonly type: "tuple";
                }];
                readonly stateMutability: "view";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keyId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "updateKey";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "keychainId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "name";
                    readonly type: "string";
                }, {
                    readonly components: readonly [{
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "keyReq";
                        readonly type: "tuple[]";
                    }, {
                        readonly components: readonly [{
                            readonly internalType: "string";
                            readonly name: "denom";
                            readonly type: "string";
                        }, {
                            readonly internalType: "uint256";
                            readonly name: "amount";
                            readonly type: "uint256";
                        }];
                        readonly internalType: "struct Types.Coin[]";
                        readonly name: "sigReq";
                        readonly type: "tuple[]";
                    }];
                    readonly internalType: "struct KeychainFees";
                    readonly name: "keychainFees";
                    readonly type: "tuple";
                }, {
                    readonly internalType: "string";
                    readonly name: "description";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "url";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "keybaseId";
                    readonly type: "string";
                }];
                readonly name: "updateKeychain";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }, {
                readonly inputs: readonly [{
                    readonly internalType: "uint64";
                    readonly name: "spaceId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "nonce";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectAdminTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "approveSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "rejectSignTemplateId";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "uint64";
                    readonly name: "actionTimeoutHeight";
                    readonly type: "uint64";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedApproveExpression";
                    readonly type: "string";
                }, {
                    readonly internalType: "string";
                    readonly name: "expectedRejectExpression";
                    readonly type: "string";
                }];
                readonly name: "updateSpace";
                readonly outputs: readonly [{
                    readonly internalType: "bool";
                    readonly name: "success";
                    readonly type: "bool";
                }];
                readonly stateMutability: "nonpayable";
                readonly type: "function";
            }];
            functionName: "allKeys" | "keyById" | "keyRequestById" | "keyRequests" | "keychainById" | "keychains" | "keysBySpaceId" | "signRequestById" | "signRequests" | "spaceById" | "spaces" | "spacesByOwner";
            args?: readonly [bigint] | undefined;
        } & {
            args: readonly [bigint];
        } & {
            address?: undefined;
            code: import("viem").Hex;
        } & import("@wagmi/core/internal").ChainIdParameter<Config, number>> & import("@wagmi/core/internal").ScopeKeyParameter, "abi">];
        signal: AbortSignal;
        meta: import("@tanstack/query-core").QueryMeta | undefined;
        pageParam?: unknown;
        direction?: unknown;
    }) => Promise<{
        id: bigint;
        creator: `0x${string}`;
        keyId: bigint;
        dataForSigning: `0x${string}`;
        status: number;
        result: `0x${string}`;
        encryptionKey: `0x${string}`;
        deductedKeychainFees: readonly {
            denom: string;
            amount: bigint;
        }[];
        broadcastType: number;
    }>;
    readonly queryKey: any;
};

import { Account, Chain, SendTransactionParameters, SendTransactionRequest, formatTransactionRequest, TransactionRequest } from "viem";
import { KeyType } from "./contracts/constants/enums";
declare function prepareEth<c extends Chain | undefined, acc extends Account | undefined, request extends SendTransactionRequest<c, chainOverride>, chainOverride extends Chain | undefined = undefined>(chain: c, account_: acc | `0x${string}`, parameters: Omit<SendTransactionParameters<c, acc, chainOverride, request>, "chain" | "account">): {
    request: TransactionRequest;
    format: typeof formatTransactionRequest;
};
export type EthPrepare = ReturnType<typeof prepareEth>;
export declare const createSendTransaction: (params: {
    chain: Chain;
    from: `0x${string}`;
    to: `0x${string}`;
    token?: `0x${string}`;
    amount: bigint;
}) => {
    request: TransactionRequest;
    format: typeof formatTransactionRequest;
};
export declare const createNewSpaceTransaction: (params: {
    chain: Chain;
    from: `0x${string}`;
}) => {
    request: TransactionRequest;
    format: typeof formatTransactionRequest;
};
export declare const createNewKeyTransaction: (params: {
    chain: Chain;
    from: `0x${string}`;
    spaceId: bigint;
    keychainId: bigint;
    keyType: KeyType;
    signTemplateId: bigint;
    rejectTemplateId: bigint;
    nonce: bigint;
    expectedApproveExpression: string;
    expectedRejectExpression: string;
}) => {
    request: TransactionRequest;
    format: typeof formatTransactionRequest;
};
export {};

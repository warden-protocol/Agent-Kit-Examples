"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetKeychainsAction = exports.GetKeychainsInput = void 0;
exports.getKeychains = getKeychains;
const viem_1 = require("viem");
const zod_1 = require("zod");
const wardenPrecompileAbi_1 = __importDefault(require("../../utils/contracts/abi/wardenPrecompileAbi"));
const known_1 = require("../../utils/contracts/constants/known");
const chains_1 = require("../../utils/chains");
const common_1 = require("../../utils/contracts/constants/common");
const wardenContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.WARDEN;
const GET_KEYCHAINS_PROMPT = `This tool should be called when a user wants to get all the available keychains.`;
const publicClient = (0, viem_1.createPublicClient)({
    chain: chains_1.primaryChain,
    transport: (0, viem_1.http)(),
});
/**
 * Input schema for get keychains action.
 */
exports.GetKeychainsInput = zod_1.z.object({});
/**
 * Gets all the available keychains.
 *
 * @returns A message containing the keychains information.
 */
async function getKeychains() {
    if (!wardenContract?.address) {
        throw new Error("Warden contract address not found");
    }
    try {
        const data = await publicClient.readContract({
            address: wardenContract.address,
            args: [common_1.DEFAULT_PAGINATION],
            abi: wardenPrecompileAbi_1.default,
            functionName: "keychains",
        });
        if (!data?.[0] || !Array.isArray(data[0])) {
            throw new Error("Invalid response from contract");
        }
        const keychains = data[0];
        const formattedList = keychains
            .map((keychain) => `â€¢ ID: ${keychain.id.toString()} - Name: ${keychain.name} - Description: ${keychain.description}`)
            .join("\n");
        return `Available Keychains:\n\n${formattedList}`;
    }
    catch (error) {
        throw new Error(`Failed to fetch keychains: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
}
/**
 * Get keychains action.
 */
class GetKeychainsAction {
    constructor() {
        this.name = "get_keychains";
        this.description = GET_KEYCHAINS_PROMPT;
        this.schema = exports.GetKeychainsInput;
        this.function = getKeychains;
    }
}
exports.GetKeychainsAction = GetKeychainsAction;

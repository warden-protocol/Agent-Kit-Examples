"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPriceAction = exports.GetPriceInput = void 0;
exports.getPrice = getPrice;
const viem_1 = require("viem");
const zod_1 = require("zod");
const slinkyPrecompileAbi_1 = __importDefault(require("../../utils/contracts/abi/slinkyPrecompileAbi"));
const known_1 = require("../../utils/contracts/constants/known");
const chains_1 = require("../../utils/chains");
const slinkyContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.SLINKY;
const GET_PRICE_PROMPT = `This tool should be called when a user wants to get the current price of a token using its symbol.`;
const publicClient = (0, viem_1.createPublicClient)({
    chain: chains_1.primaryChain,
    transport: (0, viem_1.http)(),
});
if (!slinkyContract?.address) {
    throw new Error("Slinky contract address not found");
}
const getPriceBySymbol = async (symbol) => {
    return publicClient.readContract({
        address: slinkyContract.address,
        args: [symbol, "USD"],
        abi: slinkyPrecompileAbi_1.default,
        functionName: "getPrice",
    });
};
/**
 * Input schema for get price action.
 */
exports.GetPriceInput = zod_1.z.object({
    symbol: zod_1.z.string().describe("The symbol of the token to check price for"),
});
/**
 * Gets price for a specific currency pair ID.
 *
 * @param args - The input arguments for the action.
 * @returns A message containing the price information.
 */
async function getPrice(args) {
    try {
        const priceData = await getPriceBySymbol(args.symbol);
        const price = priceData.price.price;
        const decimals = Number(priceData.decimals);
        const usd = price && decimals ? Number((0, viem_1.formatUnits)(price, decimals)) : 0;
        return `Current price of ${args.symbol}: $${usd.toFixed(2)}`;
    }
    catch (error) {
        throw new Error(`Failed to fetch price for currency pair ${args.symbol}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
}
/**
 * Get price action.
 */
class GetPriceAction {
    constructor() {
        this.name = "get_price";
        this.description = GET_PRICE_PROMPT;
        this.schema = exports.GetPriceInput;
        this.function = getPrice;
    }
}
exports.GetPriceAction = GetPriceAction;

"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetBalanceAction = exports.GetBalanceInput = void 0;
exports.getBalance = getBalance;
const viem_1 = require("viem");
const zod_1 = require("zod");
const wardenPrecompileAbi_1 = __importDefault(require("../../utils/contracts/abi/wardenPrecompileAbi"));
const known_1 = require("../../utils/contracts/constants/known");
const chains_1 = require("../../utils/chains");
const chains_2 = require("viem/chains");
const wardenContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.WARDEN;
const GET_BALANCE_PROMPT = `This tool should be called when a user wants to get the balance of sepolia eth for a specific key.`;
const sepoliaPublicClient = (0, viem_1.createPublicClient)({
    chain: chains_2.sepolia,
    transport: (0, viem_1.http)(),
});
const primaryChainPublicClient = (0, viem_1.createPublicClient)({
    chain: chains_1.primaryChain,
    transport: (0, viem_1.http)(),
});
var AddressType;
(function (AddressType) {
    AddressType[AddressType["Unspecified"] = 0] = "Unspecified";
    AddressType[AddressType["Ethereum"] = 1] = "Ethereum";
    AddressType[AddressType["Osmosis"] = 2] = "Osmosis";
})(AddressType || (AddressType = {}));
const types = [AddressType.Ethereum];
if (!wardenContract?.address) {
    throw new Error("Warden contract address not found");
}
const getKeyById = async (keyId) => {
    return primaryChainPublicClient.readContract({
        address: wardenContract.address,
        args: [keyId, types],
        abi: wardenPrecompileAbi_1.default,
        functionName: "keyById",
    });
};
/**
 * Input schema for get balance action.
 */
exports.GetBalanceInput = zod_1.z.object({
    keyId: zod_1.z.number().describe("The ID of the key to check balances for"),
});
/**
 * Gets balance for a specific key ID.
 *
 * @param args - The input arguments for the action.
 * @returns A message containing the balance information.
 */
async function getBalance(args) {
    try {
        const key = await getKeyById(BigInt(args.keyId));
        const balance = await sepoliaPublicClient.getBalance({
            address: key.addresses[0].addressValue,
            blockTag: "safe",
        });
        const balanceAsEther = (0, viem_1.formatEther)(balance);
        return `${balanceAsEther} Sepolia ETH`;
    }
    catch (error) {
        throw new Error(`Failed to fetch balance for key ${args.keyId}: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
}
/**
 * Get balance action.
 */
class GetBalanceAction {
    constructor() {
        this.name = "get_balance";
        this.description = GET_BALANCE_PROMPT;
        this.schema = exports.GetBalanceInput;
        this.function = getBalance;
    }
}
exports.GetBalanceAction = GetBalanceAction;

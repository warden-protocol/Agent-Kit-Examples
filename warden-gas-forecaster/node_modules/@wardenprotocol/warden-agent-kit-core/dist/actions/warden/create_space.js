"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CreateSpaceAction = exports.CreateSpaceInput = void 0;
exports.createSpace = createSpace;
const viem_1 = require("viem");
const zod_1 = require("zod");
const wardenPrecompileAbi_1 = __importDefault(require("../../utils/contracts/abi/wardenPrecompileAbi"));
const known_1 = require("../../utils/contracts/constants/known");
const chains_1 = require("../../utils/chains");
const wardenContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.WARDEN;
const CREATE_SPACE_PROMPT = `This tool should be called when a user wants to create a new space.`;
/**
 * Input schema for create space action.
 */
exports.CreateSpaceInput = zod_1.z.object({});
/**
 * Creates a new space with the given name.
 *
 * @param account - The account creating the space.
 * @returns A message confirming the space creation.
 */
async function createSpace(account, args) {
    try {
        if (!wardenContract?.address) {
            throw new Error("Warden contract address not found");
        }
        const walletClient = (0, viem_1.createWalletClient)({
            account,
            chain: chains_1.primaryChain,
            transport: (0, viem_1.http)(),
        });
        const hash = await walletClient.writeContract({
            address: wardenContract.address,
            abi: wardenPrecompileAbi_1.default,
            functionName: "newSpace",
            args: [BigInt(0), BigInt(0), BigInt(0), BigInt(0), []],
        });
        const publicClient = (0, viem_1.createPublicClient)({
            chain: chains_1.primaryChain,
            transport: (0, viem_1.http)(),
        });
        const receipt = await publicClient.waitForTransactionReceipt({ hash });
        if (receipt.status === "success") {
            return `Successfully created space`;
        }
        else {
            throw new Error("Transaction failed");
        }
    }
    catch (error) {
        return `Error creating space: ${error}`;
    }
}
/**
 * Create space action.
 */
class CreateSpaceAction {
    constructor() {
        this.name = "create_space";
        this.description = CREATE_SPACE_PROMPT;
        this.schema = exports.CreateSpaceInput;
        this.function = createSpace;
    }
}
exports.CreateSpaceAction = CreateSpaceAction;

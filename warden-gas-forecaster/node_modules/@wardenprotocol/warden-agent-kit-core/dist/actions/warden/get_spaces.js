"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetSpacesAction = exports.GetSpacesInput = void 0;
exports.getSpaces = getSpaces;
const viem_1 = require("viem");
const zod_1 = require("zod");
const wardenPrecompileAbi_1 = __importDefault(require("../../utils/contracts/abi/wardenPrecompileAbi"));
const known_1 = require("../../utils/contracts/constants/known");
const chains_1 = require("../../utils/chains");
const common_1 = require("../../utils/contracts/constants/common");
const wardenContract = known_1.KNOWN_CONTRACTS[chains_1.primaryChain.id]?.WARDEN;
const GET_SPACES_PROMPT = `This tool should be called when a user wants to get all their spaces.`;
/**
 * Input schema for get spaces action.
 */
exports.GetSpacesInput = zod_1.z.object({});
/**
 * Gets spaces for a given account.
 *
 * @param account - The account to get the spaces for.
 * @returns A message containing the spaces information.
 */
async function getSpaces(account, args) {
    try {
        const publicClient = (0, viem_1.createPublicClient)({
            chain: chains_1.primaryChain,
            transport: (0, viem_1.http)(),
        });
        if (!wardenContract?.address) {
            throw new Error("Warden contract address not found");
        }
        const data = await publicClient.readContract({
            address: wardenContract.address,
            args: [common_1.DEFAULT_PAGINATION, account.address],
            abi: wardenPrecompileAbi_1.default,
            functionName: "spacesByOwner",
        });
        return `These are all the spaces:\n\n${data[0].map((space) => `- ${space.id.toString()}\n`)}`;
    }
    catch (error) {
        return `Error getting spaces: ${error}`;
    }
}
/**
 * Get spaces action.
 */
class GetSpacesAction {
    constructor() {
        this.name = "get_spaces";
        this.description = GET_SPACES_PROMPT;
        this.schema = exports.GetSpacesInput;
        this.function = getSpaces;
    }
}
exports.GetSpacesAction = GetSpacesAction;

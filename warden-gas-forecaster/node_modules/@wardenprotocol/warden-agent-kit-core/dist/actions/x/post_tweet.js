"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostTweetAction = exports.PostTweetInput = void 0;
exports.postTweet = postTweet;
const zod_1 = require("zod");
const POST_TWEET_PROMPT = `
This tool will post a tweet on X. The tool takes the text of the tweet as input. Tweets can be maximum 280 characters.

A successful response will return a message with the API response as a JSON payload:
    {"data": {"text": "hello, world!", "id": "0123456789012345678", "edit_history_tweet_ids": ["0123456789012345678"]}}

A failure response will return a message with the Twitter API request error:
    You are not allowed to create a Tweet with duplicate content.
`;
exports.PostTweetInput = zod_1.z
    .object({
    tweet: zod_1.z
        .string()
        .max(280, "Tweet must be a maximum of 280 characters."),
})
    .strip()
    .describe("Input schema for posting a tweet");
/**
 * Posts a tweet on Twitter (X).
 *
 * @param client - The Twitter (X) client used to authenticate with.
 * @param args - The input arguments for the action.
 * @returns A message indicating the success or failure of the tweet posting.
 */
async function postTweet(client, args) {
    try {
        const response = await client.v2.tweet(args.tweet);
        return `Successfully posted to Twitter:\n${JSON.stringify(response)}`;
    }
    catch (error) {
        return `Error posting to Twitter:\n${error}`;
    }
}
/**
 * Post Tweet Action
 */
class PostTweetAction {
    constructor() {
        this.name = "post_tweet";
        this.description = POST_TWEET_PROMPT;
        this.schema = exports.PostTweetInput;
        this.func = postTweet;
    }
}
exports.PostTweetAction = PostTweetAction;

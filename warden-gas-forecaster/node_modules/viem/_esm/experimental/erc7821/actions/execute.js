import * as AbiError from 'ox/AbiError';
import * as AbiParameters from 'ox/AbiParameters';
import { sendTransaction, } from '../../../actions/wallet/sendTransaction.js';
import { decodeErrorResult, } from '../../../utils/abi/decodeErrorResult.js';
import { encodeFunctionData, } from '../../../utils/abi/encodeFunctionData.js';
import { getContractError, } from '../../../utils/errors/getContractError.js';
import { withCache } from '../../../utils/promise/withCache.js';
import { abi, executionMode } from '../constants.js';
import { ExecuteUnsupportedError, FunctionSelectorNotRecognizedError, } from '../errors.js';
import { supportsExecutionMode } from './supportsExecutionMode.js';
/**
 * Executes call(s) using the `execute` function on an [ERC-7821-compatible contract](https://eips.ethereum.org/EIPS/eip-7821).
 *
 * @example
 * ```ts
 * import { createClient, http } from 'viem'
 * import { privateKeyToAccount } from 'viem/accounts'
 * import { mainnet } from 'viem/chains'
 * import { execute } from 'viem/experimental/erc7821'
 *
 * const account = privateKeyToAccount('0x...')
 *
 * const client = createClient({
 *   chain: mainnet,
 *   transport: http(),
 * })
 *
 * const hash = await execute(client, {
 *   account,
 *   calls: [{
 *     {
 *       data: '0xdeadbeef',
 *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
 *     },
 *     {
 *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
 *       value: 69420n,
 *     },
 *   }],
 *   to: account.address,
 * })
 * ```
 *
 * @example
 * ```ts
 * // Account Hoisting
 * import { createClient, http } from 'viem'
 * import { privateKeyToAccount } from 'viem/accounts'
 * import { mainnet } from 'viem/chains'
 * import { execute } from 'viem/experimental/erc7821'
 *
 * const account = privateKeyToAccount('0x...')
 *
 * const client = createClient({
 *   account,
 *   chain: mainnet,
 *   transport: http(),
 * })
 *
 * const hash = await execute(client, {
 *   calls: [{
 *     {
 *       data: '0xdeadbeef',
 *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
 *     },
 *     {
 *       to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',
 *       value: 69420n,
 *     },
 *   }],
 *   to: account.address,
 * })
 * ```
 *
 * @param client - Client to use.
 * @param parameters - {@link ExecuteParameters}
 * @returns Transaction hash. {@link ExecuteReturnType}
 */
export async function execute(client, parameters) {
    const { authorizationList, calls, opData } = parameters;
    const address = authorizationList?.[0]?.contractAddress ?? parameters.address;
    const encodedCalls = encodeCalls(calls, opData);
    const mode = opData ? executionMode.opData : executionMode.default;
    const supported = await withCache(() => supportsExecutionMode(client, {
        address,
        mode,
    }), {
        cacheKey: `supportsExecutionMode.${client.uid}.${address}.${mode}`,
    });
    if (!supported)
        throw new ExecuteUnsupportedError();
    try {
        return await sendTransaction(client, {
            ...parameters,
            to: parameters.address,
            data: encodeFunctionData({
                abi,
                functionName: 'execute',
                args: [mode, encodedCalls],
            }),
        });
    }
    catch (e) {
        const error = e.walk((e) => 'data' in e);
        if (!error?.data)
            throw e;
        if (error.data ===
            AbiError.getSelector(AbiError.from('error FnSelectorNotRecognized()')))
            throw new FunctionSelectorNotRecognizedError();
        let matched = null;
        for (const c of parameters.calls) {
            const call = c;
            if (!call.abi)
                continue;
            try {
                const matches = Boolean(decodeErrorResult({
                    abi: call.abi,
                    data: error.data,
                }));
                if (!matches)
                    continue;
                matched = call;
            }
            catch { }
        }
        if (!matched)
            throw e;
        throw getContractError(error, {
            abi: matched.abi,
            address: matched.to,
            args: matched.args,
            docsPath: '/experimental/erc7821/execute',
            functionName: matched.functionName,
        });
    }
}
/** @internal */
export function encodeCalls(calls_, opData) {
    const calls = calls_.map((call_) => {
        const call = call_;
        return {
            data: call.abi ? encodeFunctionData(call) : (call.data ?? '0x'),
            value: call.value ?? 0n,
            target: call.to,
        };
    });
    return AbiParameters.encode(AbiParameters.from([
        'struct Call { address target; uint256 value; bytes data; }',
        'Call[] calls',
        ...(opData ? ['bytes opData'] : []),
    ]), [calls, ...(opData ? [opData] : [])]);
}
//# sourceMappingURL=execute.js.map
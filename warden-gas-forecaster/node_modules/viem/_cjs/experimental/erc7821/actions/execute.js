"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = execute;
exports.encodeCalls = encodeCalls;
const AbiError = require("ox/AbiError");
const AbiParameters = require("ox/AbiParameters");
const sendTransaction_js_1 = require("../../../actions/wallet/sendTransaction.js");
const decodeErrorResult_js_1 = require("../../../utils/abi/decodeErrorResult.js");
const encodeFunctionData_js_1 = require("../../../utils/abi/encodeFunctionData.js");
const getContractError_js_1 = require("../../../utils/errors/getContractError.js");
const withCache_js_1 = require("../../../utils/promise/withCache.js");
const constants_js_1 = require("../constants.js");
const errors_js_1 = require("../errors.js");
const supportsExecutionMode_js_1 = require("./supportsExecutionMode.js");
async function execute(client, parameters) {
    const { authorizationList, calls, opData } = parameters;
    const address = authorizationList?.[0]?.contractAddress ?? parameters.address;
    const encodedCalls = encodeCalls(calls, opData);
    const mode = opData ? constants_js_1.executionMode.opData : constants_js_1.executionMode.default;
    const supported = await (0, withCache_js_1.withCache)(() => (0, supportsExecutionMode_js_1.supportsExecutionMode)(client, {
        address,
        mode,
    }), {
        cacheKey: `supportsExecutionMode.${client.uid}.${address}.${mode}`,
    });
    if (!supported)
        throw new errors_js_1.ExecuteUnsupportedError();
    try {
        return await (0, sendTransaction_js_1.sendTransaction)(client, {
            ...parameters,
            to: parameters.address,
            data: (0, encodeFunctionData_js_1.encodeFunctionData)({
                abi: constants_js_1.abi,
                functionName: 'execute',
                args: [mode, encodedCalls],
            }),
        });
    }
    catch (e) {
        const error = e.walk((e) => 'data' in e);
        if (!error?.data)
            throw e;
        if (error.data ===
            AbiError.getSelector(AbiError.from('error FnSelectorNotRecognized()')))
            throw new errors_js_1.FunctionSelectorNotRecognizedError();
        let matched = null;
        for (const c of parameters.calls) {
            const call = c;
            if (!call.abi)
                continue;
            try {
                const matches = Boolean((0, decodeErrorResult_js_1.decodeErrorResult)({
                    abi: call.abi,
                    data: error.data,
                }));
                if (!matches)
                    continue;
                matched = call;
            }
            catch { }
        }
        if (!matched)
            throw e;
        throw (0, getContractError_js_1.getContractError)(error, {
            abi: matched.abi,
            address: matched.to,
            args: matched.args,
            docsPath: '/experimental/erc7821/execute',
            functionName: matched.functionName,
        });
    }
}
function encodeCalls(calls_, opData) {
    const calls = calls_.map((call_) => {
        const call = call_;
        return {
            data: call.abi ? (0, encodeFunctionData_js_1.encodeFunctionData)(call) : (call.data ?? '0x'),
            value: call.value ?? 0n,
            target: call.to,
        };
    });
    return AbiParameters.encode(AbiParameters.from([
        'struct Call { address target; uint256 value; bytes data; }',
        'Call[] calls',
        ...(opData ? ['bytes opData'] : []),
    ]), [calls, ...(opData ? [opData] : [])]);
}
//# sourceMappingURL=execute.js.map